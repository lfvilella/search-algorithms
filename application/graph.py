"""Graph.py

This module a few cities from São Paulo state.
"""

STATES = [
    'SÃO PAULO',
    'GUARULHOS',
    'CAMPINAS',
    'SÃO BERNARDO DO CAMPO',
    'SÃO JOSÉ DOS CAMPOS',
    'SANTO ANDRÉ',
    'ITARIRI',
    'POTIRENDABA',
    'CHARQUEADA',
    'MACATUBA',
    'GUAPIARA',
    'BURITAMA',
    'SALESÓPOLIS',
    'PINDORAMA',
    'PEDREGULHO',
    'ROSANA',
    'TABATINGA',
    'RIBEIRÃO BRANCO',
    'IPUÃ',
    'ALTINÓPOLIS',
    'BORBOREMA',
    'FARTURA',
    'SÃO LOURENÇO DA SERRA',
    'PANORAMA',
    'TUPI PAULISTA',
    'ELDORADO',
    'SANTA ADÉLIA',
    'SÃO SIMÃO',
    'ITAJOBI',
    'PINHALZINHO',
    'AURIFLAMA',
    'ITAPORANGA',
    'TARUMÃ',
    'IPAUSSU',
    'LUÍS ANTÔNIO',
    'HOLAMBRA',
    'BOA ESPERANÇA DO SUL',
    'SANTA BRANCA',
    'PATROCÍNIO PAULISTA',
    'SERRA AZUL',
    'FLÓRIDA PAULISTA',
    'PACAEMBU',
    'QUATÁ',
    'MARACAÍ',
    'ITAPUÍ',
    'TAGUAÍ',
    'URUPÊS',
    'PIQUETE',
    'AVANHANDAVA',
    'PIRATININGA',
    'RIBEIRÃO PRETO',
    'OSASCO',
    'SOROCABA',
    'MAUÁ',
    'SÃO JOSÉ DO RIO PRETO',
    'MOGI DAS CRUZES',
    'SANTOS',
    'DIADEMA',
    'JUNDIAÍ',
    'PIRACICABA',
    'CARAPICUÍBA',
    'BAURU',
    'ITAQUAQUECETUBA',
    'SÃO VICENTE',
    'FRANCA',
    'PRAIA GRANDE',
    'GUARUJÁ',
    'TAUBATÉ',
    'LIMEIRA',
    'SUZANO',
    'TABOÃO DA SERRA',
    'SUMARÉ',
    'BARUERI',
    'EMBU DAS ARTES',
    'SÃO CARLOS',
    'INDAIATUBA',
    'COTIA',
    'AMERICANA',
    'MARÍLIA',
    'ITAPEVI',
    'ARARAQUARA',
    'JACAREÍ',
    'PRESIDENTE PRUDENTE',
    'HORTOLÂNDIA',
    'RIO CLARO',
    'ARAÇATUBA',
    'FERRAZ DE VASCONCELOS',
    "SANTA BÁRBARA D'OESTE",
    'FRANCISCO MORATO',
    'ITAPECERICA DA SERRA',
    'ITU',
    'BRAGANÇA PAULISTA',
    'PINDAMONHANGABA',
    'ITAPETININGA',
    'SÃO CAETANO DO SUL',
    'FRANCO DA ROCHA',
    'MOGI GUAÇU',
    'JAÚ',
    'BOTUCATU',
    'ATIBAIA',
]

PARSER = {idx: state for idx, state in enumerate(STATES)}

GRAPH = {  # node, weight
    0: [(1, 21), (11, 543)],
    1: [(0, 21), (2, 110)],
    2: [(1, 110), (3, 150)],
    3: [(2, 150), (4, 129), (5, 123)],
    4: [(3, 129), (5, 8)],
    5: [(3, 123), (4, 8), (6, 152)],
    6: [(5, 152), (7, 568)],
    7: [(5, 568), (8, 283)],
    8: [(7, 283), (9, 113)],
    9: [(8, 113), (10, 315)],
    10: [(9, 315), (21, 117)],
    11: [(0, 543), (12, 629), (22, 566)],
    12: [(11, 629), (13, 464)],
    13: [(12, 464), (14, 223)],
    14: [(13, 223), (15, 708)],
    15: [(14, 708), (16, 562)],
    16: [(15, 562), (17, 372)],
    17: [(16, 372), (18, 560)],
    18: [(17, 560), (19, 120)],
    19: [(18, 120), (20, 215)],
    20: [(19, 215), (21, 300)],
    21: [(10, 177), (20, 300), (32, 189)],
    22: [(11, 566), (23, 717), (33, 385)],
    23: [(22, 717), (24, 37)],
    24: [(23, 37), (25, 821)],
    25: [(24, 821), (26, 594)],
    26: [(25, 594), (27, 172)],
    27: [(26, 172), (28, 196)],
    28: [(27, 196), (29, 381)],
    29: [(28, 381), (30, 568)],
    30: [(29, 568), (31, 481)],
    31: [(30, 481), (32, 248)],
    32: [(31, 248), (21, 189), (43, 21)],
    33: [(22, 385), (34, 336), (44, 155)],
    34: [(33, 336), (35, 185)],
    35: [(34, 185), (36, 193)],
    36: [(35, 193), (37, 367)],
    37: [(36, 367), (38, 448)],
    38: [(37, 448), (39, 122)],
    39: [(38, 122), (40, 467)],
    40: [(39, 467), (41, 14)],
    41: [(40, 14), (42, 133)],
    42: [(41, 133), (43, 70)],
    43: [(32, 21), (42, 70)],
    44: [(33, 155), (45, 208)],
    45: [(44, 208), (46, 345)],
    46: [(45, 345), (47, 595)],
    47: [(46, 595), (48, 673)],
    48: [(47, 673), (49, 162)],
    49: [(48, 162), (50, 226)],
    50: [(49, 226), (51, 312)],
    51: [(50, 312), (52, 84)],
    52: [(51, 84), (53, 162)],
    53: [(52, 162), (54, 483)],
    54: [(53, 483), (65, 513)],
    55: [(56, 119), (66, 89)],
    56: [(55, 119), (57, 62)],
    57: [(56, 62), (58, 78)],
    58: [(57, 78), (59, 105)],
    59: [(58, 105), (60, 156)],
    60: [(59, 156), (61, 308)],
    61: [(60, 308), (62, 366)],
    62: [(61, 366), (63, 96)],
    63: [(62, 96), (64, 468)],
    64: [(63, 468), (65, 473)],
    65: [(54, 513), (64, 473)],
    66: [(55, 89), (67, 213)],
    67: [(66, 213), (68, 247)],
    68: [(67, 247), (69, 192)],
    69: [(68, 192), (70, 98)],
    70: [(69, 98), (71, 129)],
    71: [(70, 129), (72, 113)],
    72: [(71, 113), (73, 26)],
    73: [(72, 26), (74, 245)],
    74: [(73, 245), (75, 167)],
    75: [(74, 167), (76, 103)],
    76: [(75, 103), (87, 150)],
    77: [(78, 342), (88, 101)],
    78: [(77, 342), (79, 406)],
    79: [(78, 406), (80, 282)],
    80: [(79, 282), (81, 325)],
    81: [(80, 325), (82, 632)],
    82: [(81, 632), (83, 515)],
    83: [(82, 515), (84, 72)],
    84: [(83, 72), (85, 376)],
    85: [(84, 376), (86, 555)],
    86: [(85, 555), (87, 173)],
    87: [(76, 150), (86, 173)],
    88: [(77, 101), (89, 61), (98, 258)],
    89: [(88, 61), (90, 104)],
    90: [(89, 104), (91, 105)],
    91: [(90, 105), (92, 168)],
    92: [(91, 168), (93, 307)],
    93: [(92, 307), (94, 178)],
    94: [(93, 178), (95, 56)],
    95: [(94, 56), (96, 138)],
    96: [(95, 138), (97, 219)],
    97: [(96, 219)],
    98: [(88, 258), (99, 290)],
    99: [(98, 290)],
}


GRAPH_TO_DFS = {}

for k, v in GRAPH.items():
    new = []
    for value in v:
        node, _ = value
        new.append(node)

    GRAPH_TO_DFS[k] = new
